Components can be nested

ng generate component componentName - Generates a new component, creating the folder, .html,.css,.ts and the component entry in app.module
Each component should have the folders name equals to his name
Each component has his own Decorator specifying the selector, template Url and style

The tamplate property can be filled with the relative component path(templateUrl) or in tags(template)
Template is a REQUIRED property

The styles property can be filled with the relative component path(stylesUrl) or in pure code(styles)
Template is a NOT REQUIRED property
You can combien both options of styles, however make sure to apply it as an array

You can define a selector as an attribute putting into [] 
and swapping the tag definition in the index.html do a html property with the selector name like : <div app-servers>
It is also recognized defining it as a class

Data Binding
    Communication between Components
    Output Data
        ->String inerporlation - Defined in TS file and used with {{ var }} in the template
        ->Property Binding - Used in specifying scenario : [html property]=propertyName
        DONT MIX BOTH

Events
    defined in the TS file as functions
    called in html using (click)="eventName"
    $event -> capture data
    Event property
        Has a target that contains a value
        can be used via $event in the html file and as the function parameter in TS file
        Two way binding : [(ngModel)]="variableName". it will update the variable wherever it is being used


Directives
    Directives are isntructions in the DOM
    Defined via a Decorator- @Directive
    Use *ngIf to make a refence to a Directive - <p ngIf="name">
    Unlike structuras directives, attribute directives dont add or remove
    element. They only change the element they were placed on.
    It is possible to change style properties using [ngStyle]
    It is possible using class by [ngClass]
    Using  **ngFor="let item of items" is possible to make usage of arrays of components
